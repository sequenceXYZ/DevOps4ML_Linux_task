Hands-On-task-Linux

As a junior DevOps engineer, you have a task from Team Lead.

A client wants to have a file filled with commands which they can execute at their side to achieve the next things:
1. All commands below should be executed by user "admin".
2. Create an archive from contents of /etc/nginx/ directory.
3. Move this archive to /opt/archive/ directory.
4. Outputs of all commands should be stored in /opt/archive/output.txt file and must be understandable - the file is created for clients' needs. The "echo" command could help you with that.
5. /opt/archive and all files inside must be owned by user "director" and group "maintainer".

Please keep in mind next things:

- Neither Nginx nor required users or groups are on the newly created instance by default, add them manually. 
- Both  output and command files must well-commented to explain what is going on.
- Pay attention to this page, especially Security Groups (AWS security policy#SecurityGroups)
- Change default 22 port inbound rule to HTTPS (443) and source IP address should be your public IP Address.
- Read AWS Instance creation steps to learn how to create an AWS instance, which AMI/IAM to use, etc.
________________________________________________________________

# print working directory
pwd      
outcome: /var/snap/amazon-ssm-agent/6312

# check the user
whoami   
outcome: ssm-user

# create user 'admin'
sudo useradd admin      
outcome: useradd: group admin exists - if you want to add this user to that group, use -g.

# add user 'admin' to 'admin' group
sudo useradd -g admin admin   
outcome: 'empty'

# set password for user 'admin'
sudo passwd admin      
outcome: passwd: password updated successfully

# check in which groups user is
groups admin
outcome: admin : admin

# create user 'director'
sudo useradd director
outcome: 'empty'

# create group 'maintainer'
sudo groupadd maintainer
outcome: 'empty'

# add user 'director' to 'maintainer' group
sudo usermod -aG maintainer director
outcome: 'empty'
# add user 'admin' to 'maintainer' group
sudo usermod -aG maintainer admin
outcome: 'empty'

# check in which groups users are
groups admin
outcome: admin : admin maintainer
groups director
outcome: director : director maintainer

# list all system users
sudo cat /etc/passwd
outcome:
ssm-user:x:1001:1001::/home/ssm-user:/bin/sh
admin:x:1002:116::/home/admin:/bin/sh
director:x:1003:1003::/home/director:/bin/sh

# switch user
su - admin
oucome: Password:

# check user
whoami
outcome: admin

# update packages
sudo apt update
outcome:
154 packages can be upgraded. Run 'apt list --upgradable' to see them.

# sudo install nginx
sudo apt install nginx -y
# check if nginx is installed
which nginx
outcome : /usr/sbin/nginx

# list all contents of /etc/nginx/ directory
la -al /etc/nginx/

# change directory to /etc/nginx/
cd /etc/nginx/
pwd
outcome: /etc/nginx
# create archive of all files from /etc/nginx/*
sudo tar czvf compressed.tar.gz /etc/nginx/*
outcome: -rw-r--r--   1 root root  6788 Sep 29 09:25 compressed.tar.gz

# to check what is in the archive
tar -tf compressed.tar.gz

# check what is in /opt directory
ls -al /opt
# create subdirectory /opt/archive
mkdir /opt/archive
outcomme: drwxr-xr-x  2 root     root   4096 Sep 29 09:27 archive

# move archive to /opt/archive
sudo mv compressed.tar.gz /opt/archive
ls -al /opt/archive
outcome: -rw-r--r-- 1 root root 6788 Sep 29 09:25 compressed.tar.gz


# change directory to /opt/archive
cd /opt/archive
pwd
outcome: /opt/archive

# create file
sudo touch output.txt
outcome: -rw-r--r-- 1 root root    0 Sep 29 09:34 output.txt
# allow all to write in the file
sudo chmod a+w output.txt
nano output.txt
# save outputs of all commands in output.txt file
ls -al >> output.txt
# print out content of output file
cat output.txt

# set user director and group maintainer of the directory and subdirectories /opt/archive
sudo chown -R director:maintainer /opt/archive/	
-rw-r--r-- 1 director maintainer 6788 Sep 29 09:25 compressed.tar.gz
-rw-rw-rw- 1 director maintainer  217 Sep 29 09:40 output.txt
______________________________________________________________
# Tips from TL:
/*date
date +%F
date +%F-%T
sudo  -u admin tar czf /opt/archieve/compressed-$(date +%F-%T).tar.gz /etc/nginx
crontab */

